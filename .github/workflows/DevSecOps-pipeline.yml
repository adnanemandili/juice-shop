name: DevSecOps CI/CD Pipeline for OWASP Juice Shop

on:
  push:
    branches:
      - master

permissions:
  contents: write
  security-events: write

jobs:
  build:
    name: Build and Deploy Juice Shop
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Pull Juice Shop Docker Image
        run: docker pull bkimminich/juice-shop

      - name: Start Juice Shop Container
        run: |
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop
          # Wait for container to be healthy
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 5; done' || false

  security_testing:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install

      # SAST: CodeQL Security Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended
          config: |
            paths-ignore:
              - 'data/static/codefixes'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
          output: "codeql-results"

      # SCA: Snyk Vulnerability Scanning
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/setup@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: snyk test --json > snyk-results.json

      # DAST: OWASP ZAP Scan
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: >-
            -a
            -j
            -J zap-results.json
            -z
            "config.connection.timeoutInSecs=60;
            config.scanner.maxScanDurationInMins=30;
            config.spider.maxDurationInMins=10;
            config.api.addrs.addr.name=.* ;
            config.api.addrs.addr.regex=true"
          allow_issue_writing: true
          fail_action: false  # Don't fail the build on vulnerabilities
        continue-on-error: true  # Continue pipeline even if ZAP scan fails

      - name: Archive ZAP Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-results
          path: |
            zap-results.json
            *.html

      # Upload Scan Results
      - name: Upload Scan Results
        if: always()  # Always upload results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            snyk-results.json
            codeql-results/**

  vulnerability_management:
    name: Vulnerability Management
    needs: security_testing
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results
          path: scan-results

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install DefectDojo API Client
        run: |
          pip install defectdojo_api-v2

      - name: Create DefectDojo Engagement and Upload Scans
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_PRODUCT_ID: ${{ secrets.DEFECTDOJO_PRODUCT_ID }}
        run: |
          export TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          python3 <<EOF
          import os
          from defectdojo_api_v2.api import DefectDojoAPI
          from datetime import datetime
          import requests
          from urllib3.exceptions import InsecureRequestWarning
          requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

          # Initialize DefectDojo API client
          dd = DefectDojoAPI(
              os.environ['DEFECTDOJO_URL'],
              os.environ['DEFECTDOJO_API_KEY'],
              debug=True,
              verify_ssl=False
          )

          # Get product ID from environment
          product_id = int(os.environ['DEFECTDOJO_PRODUCT_ID'])
          
          try:
              # Create engagement
              engagement_data = {
                  'product': product_id,
                  'name': f'Automated Scan {datetime.now().strftime("%Y%m%d_%H%M%S")}',
                  'target_start': datetime.now().strftime('%Y-%m-%d'),
                  'target_end': datetime.now().strftime('%Y-%m-%d'),
                  'status': 'In Progress',
                  'deduplication_on_engagement': True
              }
              
              # Create engagement using the API
              engagement = dd.create('engagements', data=engagement_data)
              print(f"Created engagement with ID: {engagement['id']}")
              
              # Function to upload scan results
              def safe_upload(file_path, scan_type, scan_type_id):
                  try:
                      with open(file_path, 'rb') as f:
                          files = {'file': f}
                          data = {
                              'engagement': engagement['id'],
                              'scan_type': scan_type,
                              'scan_date': datetime.now().strftime('%Y-%m-%d'),
                              'minimum_severity': 'Info'
                          }
                          result = dd.upload_scan(data, files)
                          print(f"Successfully uploaded {scan_type}")
                          return result
                  except FileNotFoundError:
                      print(f"Warning: File not found: {file_path}")
                  except Exception as e:
                      print(f"Error uploading {scan_type}: {str(e)}")
                  return None

              # Upload scan results
              safe_upload('scan-results/codeql-results/javascript.sarif', 'SARIF', 1)
              safe_upload('scan-results/snyk-results.json', 'Snyk Scan', 2)
              safe_upload('scan-results/zap-results.json', 'ZAP Scan', 3)

              # Close the engagement
              engagement_data['status'] = 'Completed'
              dd.update('engagements', engagement['id'], data=engagement_data)
              print("Successfully closed engagement")
              
          except Exception as e:
              print(f"Error in DefectDojo integration: {str(e)}")
              exit(1)
          EOF

  redeploy:
    name: Redeploy Juice Shop
    runs-on: ubuntu-latest
    needs: vulnerability_management
    if: success()

    steps:
      - name: Pull Latest Juice Shop Docker Image
        run: docker pull bkimminich/juice-shop

      - name: Deploy and Verify Juice Shop
        run: |
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 5; done' || false