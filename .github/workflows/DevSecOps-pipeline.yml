name: DevSecOps CI/CD Pipeline for OWASP Juice Shop

on:
  push:
    branches:
      - master

permissions:
  contents: write
  security-events: write

jobs:
  # Step 1: Build Juice Shop
  build:
    name: Build and Deploy Juice Shop
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Pull Juice Shop Docker Image
        run: docker pull bkimminich/juice-shop

  # Step 2: Security Testing
  security_testing:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install

      # SAST: CodeQL Security Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended
          config: |
            paths-ignore:
              - 'data/static/codefixes'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
          output: "codeql-results"

      # SCA: Snyk Vulnerability Scanning
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        with:
          command: test --json > snyk-results.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # DAST: OWASP ZAP Dynamic Analysis
      - name: Start Juice Shop Container
        run: |
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop
          sleep 30

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -J zap-results.json --verbose'

      # Upload Scan Results
      - name: Upload Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            codeql-results
            snyk-results.json
            zap-results.json

      # - name: Install Snyk CLI
      #   run: npm install -g snyk
      # - name: Run Snyk for Dependency Scanning
      #   run: snyk test --all-projects

  # vulnerability_management:
  #   name: Manage & Visualize Vulnerabilities
  #   runs-on: ubuntu-latest
  #   needs: security_testing

  #   steps:
  #     - name: Install SonarQube Scanner
  #       run: |
  #         curl -sSLo sonarqube-scanner-cli.zip https://github.com/SonarSource/sonar-scanner-cli/releases/download/4.6.2.2472/sonar-scanner-cli-4.6.2.2472-linux.zip
  #         unzip sonarqube-scanner-cli.zip -d $HOME
  #         export PATH=$HOME/sonar-scanner-*/bin:$PATH

  #     - name: Run SonarQube scan
  #       run: |
  #         sonar-scanner \
  #           -Dsonar.projectKey=juice-shop \
  #           -Dsonar.sources=. \
  #           -Dsonar.host.url=https://sonarcloud.io \
  #           -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

  vulnerability_management:
    name: Vulnerability Management
    needs: security_testing
    runs-on: ubuntu-latest

    steps:
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results
          path: scan-results

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install DefectDojo CLI
        run: |
          pip install defectdojo_api

      - name: Create DefectDojo Engagement and Upload Scans
        env:
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
        run: |
          export TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          python3 <<EOF
          from defectdojo_api import DefectDojoAPI

          # Initialize DefectDojo API client
          dd = DefectDojoAPI('${DEFECTDOJO_URL}', '${DEFECTDOJO_API_KEY}', debug=True)

          # Create engagement
          engagement_data = {
              'product': ${DEFECTDOJO_PRODUCT_ID},
              'name': f'Automated Scan ${TIMESTAMP}',
              'target_start': '$(date -I)',
              'target_end': '$(date -I)',
              'status': 'In Progress'
          }
          engagement = dd.create_engagement(**engagement_data)

          # Upload CodeQL results
          with open('scan-results/codeql-results/javascript.sarif', 'rb') as f:
              dd.upload_scan(engagement['id'], 'SARIF', f)

          # Upload Snyk results
          with open('scan-results/snyk-results.json', 'rb') as f:
              dd.upload_scan(engagement['id'], 'Snyk Scan', f)

          # Upload ZAP results
          with open('scan-results/zap-results.json', 'rb') as f:
              dd.upload_scan(engagement['id'], 'ZAP Scan', f)

          # Close engagement
          dd.close_engagement(engagement['id'])
          EOF

  redeploy:
    name: Redeploy Juice Shop
    runs-on: ubuntu-latest
    needs: vulnerability_management

    steps:
      - name: Pull Latest Juice Shop Docker Image
        run: docker pull bkimminich/juice-shop

      - name: Redeploy Juice Shop
        run: |
          docker stop juice-shop || true
          docker rm juice-shop || true
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop