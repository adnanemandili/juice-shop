name: DevSecOps CI/CD Pipeline for OWASP Juice Shop

on:
  push:
    branches:
      - master

permissions:
  contents: write
  security-events: write

jobs:
  build:
    name: Build and Deploy Juice Shop
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Pull Juice Shop Docker Image
        run: docker pull bkimminich/juice-shop

      - name: Start Juice Shop Container
        run: |
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop
          # Wait for container to be healthy
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 5; done' || false

  security_testing:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # SAST: CodeQL Security Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended
          config: |
            paths-ignore:
              - 'data/static/codefixes'
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
          output: "codeql-results"
      - name: Upload codeQL results as artifact
        uses: actions/upload-artifact@v4
        with: 
          name: codeql-scan-results
          path: codeql-results/*.sarif

      # SCA: Snyk Vulnerability Scanning
      - uses: actions/checkout@master
      - name: Install Dependencies
        run: npm install
      - name: Create sarif-files directory
        run: mkdir -p sarif-files
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
      - name: Upload snyk results as artifact
        uses: actions/upload-artifact@v4
        with: 
          name: snyk-scan-results
          path: snyk.sarif
          
      # DAST: OWASP ZAP Scan
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: >-
            -a
            -j
            -J zap-results.json
            -z
            "config.connection.timeoutInSecs=60;
            config.scanner.maxScanDurationInMins=30;
            config.spider.maxDurationInMins=10;
            config.api.addrs.addr.name=.* ;
            config.api.addrs.addr.regex=true"
          allow_issue_writing: true
          fail_action: false
        continue-on-error: true
      - name: Upload zap results as artifact
        uses: actions/upload-artifact@v4
        with: 
          name: zap-scan-results
          path: zap-results.json

  vulnerability_management:
    name: Vulnerability Management
    needs: security_testing
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download scan results
      - name: Download Scan Results
        uses: actions/download-artifact@v4
        with:
          pattern: "*-scan-results"
          path: scan-results
          merge-multiple: true

      # SonarCloud Analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=.
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.externalIssuesReportPaths=scan-results/snyk.sarif,scan-results/javascript.sarif
            
      # Check Quality Gate
      - name: Check Quality Gate
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        timeout-minutes: 5
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
          
      # List Final Files and Summary
      - name: Scan Results Summary
        if: always()
        run: |
          echo "Scan Results Summary:"
          echo "===================="
          echo "üìä Results uploaded to SonarCloud"
          echo "üîç Quality Gate Status: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          
          echo "Processed Scan Files:"
          ls -la scan-results/
  
  redeploy:
    name: Redeploy Juice Shop
    runs-on: ubuntu-latest
    needs: vulnerability_management
    if: success()

    steps:
      - name: Pull Latest Juice Shop Docker Image
        run: docker pull bkimminich/juice-shop

      - name: Deploy and Verify Juice Shop
        run: |
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 5; done' || false