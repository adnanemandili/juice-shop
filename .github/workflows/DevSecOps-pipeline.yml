name: DevSecOps CI/CD Pipeline for OWASP Juice Shop

on:
  push:
    branches:
      - master

permissions:
  contents: write
  security-events: write

jobs:
  build:
    name: Build and Deploy Juice Shop
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Pull Juice Shop Docker Image
        run: docker pull bkimminich/juice-shop

      - name: Start Juice Shop Container
        run: |
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop
          # Wait for container to be healthy
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 5; done' || false

  security_testing:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: npm install

      # SAST: CodeQL Security Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended
          config: |
            paths-ignore:
              - 'data/static/codefixes'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
          output: "codeql-results"

      # SCA: Snyk Vulnerability Scanning
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test --json-file-output=snyk-results.json

      # DAST: OWASP ZAP Scan
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: >-
            -a
            -j
            -J zap-results.json
            -z
            "config.connection.timeoutInSecs=60;
            config.scanner.maxScanDurationInMins=30;
            config.spider.maxDurationInMins=10;
            config.api.addrs.addr.name=.* ;
            config.api.addrs.addr.regex=true"
          allow_issue_writing: true
          fail_action: false
        continue-on-error: true

      # Upload Scan Results
      - name: Upload Scan Results
        if: always()  # Always upload results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            snyk-results.json
            codeql-results/**
            zap-results.json
            *.html

  vulnerability_management:
    name: Vulnerability Management
    needs: security_testing
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results
          path: scan-results

      # Create engagement first
      - name: Create DefectDojo Engagement
        id: create-engagement
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          TODAY=$(date +%Y-%m-%d)
          
          # Create engagement using DefectDojo API
          ENGAGEMENT_RESPONSE=$(curl -X POST \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.DEFECTDOJO_URL }}/api/v2/engagements/" \
            -d "{
              \"product\": ${{ secrets.DEFECTDOJO_PRODUCT_ID }},
              \"name\": \"Automated Scan ${TIMESTAMP}\",
              \"target_start\": \"${TODAY}\",
              \"target_end\": \"${TODAY}\",
              \"status\": \"In Progress\",
              \"deduplication_on_engagement\": true
            }")
          
          # Extract engagement ID
          ENGAGEMENT_ID=$(echo $ENGAGEMENT_RESPONSE | jq -r '.id')
          echo "engagement_id=${ENGAGEMENT_ID}" >> "$GITHUB_OUTPUT"
          echo "Created engagement with ID: ${ENGAGEMENT_ID}"

      # Import scan results using the newly created engagement
      - name: Import CodeQL Results
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_API_KEY }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: scan-results/codeql-results/javascript.sarif
          scan_type: SARIF
          engagement: ${{ steps.create-engagement.outputs.engagement_id }}
          
      - name: Import Snyk Results
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_API_KEY }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: scan-results/snyk-results.json
          scan_type: Snyk Scan
          engagement: ${{ steps.create-engagement.outputs.engagement_id }}
          
      - name: Import ZAP Results
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_API_KEY }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: scan-results/zap-results.json
          scan_type: ZAP Scan
          engagement: ${{ steps.create-engagement.outputs.engagement_id }}

      # Close the engagement
      - name: Close Engagement
        if: always()
        run: |
          curl -X PATCH \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.DEFECTDOJO_URL }}/api/v2/engagements/${{ steps.create-engagement.outputs.engagement_id }}/" \
            -d "{\"status\": \"Completed\"}"

      - name: Check Import Results
        if: always()
        run: |
          if [[ -f scan-results/codeql-results/javascript.sarif ]]; then
            echo "CodeQL results file exists"
          else
            echo "Warning: CodeQL results file not found"
          fi
          
          if [[ -f scan-results/snyk-results.json ]]; then
            echo "Snyk results file exists"
          else
            echo "Warning: Snyk results file not found"
          fi
          
          if [[ -f scan-results/zap-results.json ]]; then
            echo "ZAP results file exists"
          else
            echo "Warning: ZAP results file not found"
          fi
            
  redeploy:
    name: Redeploy Juice Shop
    runs-on: ubuntu-latest
    needs: vulnerability_management
    if: success()

    steps:
      - name: Pull Latest Juice Shop Docker Image
        run: docker pull bkimminich/juice-shop

      - name: Deploy and Verify Juice Shop
        run: |
          docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 5; done' || false